import sys
import os
import getopt

#helper counter for creating unique code named variables
globalCounter = 0
def incrementGlobalCounter():
	global globalCounter
	globalCounter = globalCounter + 1
	return

# TODO
# read some params from the command line
# for the number coming in
def main(argv):
	# num to process
	numToProcess = 4
	
	# for now just output to print
	outFile = ''
	
	# write out the header
	writeHeaderOfFile(outFile)
	
	# process all the ListWrapper
	writeAllLists(outFile, numToProcess)
	
	#process all the DictionaryWrappers
	writeAllDictionaries(outFile, numToProcess)
	
	#process all the mixed types
	writeMixedListDictionaryTypes(outFile, numToProcess)
	
	# write out the header
	writeFooterOfFile(outFile)
	
	return

def writeStringOut(in_string, in_outFile ='', in_forceOverwrite = 0):
	# the base input string to a file
	#if in_outFile != '':
	#	if in_forceOverwrite == 1:
	#		in_string > in_outFile
	#	else :
	#		in_string >> in_outFile
	# if no file, write to standard print
	#else:
	print in_string
	return

#write out the initial header of the file
def writeHeaderOfFile(in_outFile):
	stringHeader = '\r\n\
using System; \r\n\
using System.Collections.Generic; \r\n\
using System.Text; \r\n\
\r\n\
// ****** AUTO GENERATED FILE FROM @createPreConstructorsToDepth.py@ ******** \r\n\
// ****** AUTO GENERATED ******** \r\n\
// ****** AUTO GENERATED ******** \r\n\
namespace BrainCloud.Entity.Internal \r\n\
{ \r\n\
	internal class AutoCreateAOTCompileHelper \r\n\
	{ \r\n\
#if UNITY \r\n\
		// ****** AUTO GENERATED ******** \r\n\
		// This function is needed in order to define a bunch of ListWrapper constructors \r\n\
		// At compile time, instead of on the fly.  Since on iOS, they ensure AOT compilation. \r\n\
		// By just writing this code, even though it is NEVER called, it allows the compiler to \r\n\
		// create the contructors beforehand, thus NOT relying on Just In Time Compilation of the \r\n\
		// constructors. \r\n\
		// [smrj] \r\n\
		// \r\n\
'
	# force create new
	writeStringOut(stringHeader, in_outFile, 1)
	return

#write out the end of file info
def writeFooterOfFile(in_outFile):
	stringFooter = '\
	#endif  // UNITY \r\n\
	}// internal class AutoCreateAOTCompileHelper \r\n\
}// namespace BrainCloud.Entity.Internal\
'
	# force create new
	writeStringOut(stringFooter, in_outFile, 0)
	return


#numToProcess	10
def writeAllLists(in_outFile, in_numToProcess = 0):
	
	#comment and function
	stringToWrite = '\
		// ********* AUTOGENERATED ********* \r\n\
\
		private void DummyFunctionListWrapperFwdDeclareAOT() \r\n\
		{\
		'
	writeStringOut(stringToWrite, in_outFile)
	
	# ListWrapper
	# regular list
	listPrefix = ''
	toAppendPrefix = 'IList<'
	suffix = ''
	
	# loop over these for the depth needed
	for i in range(in_numToProcess):
		#basic types
		printListWrapperFileBase(in_outFile, listPrefix+'int'+suffix,		listPrefix+'object'+suffix)
		printListWrapperFileBase(in_outFile, listPrefix+'float'+suffix,		listPrefix+'object'+suffix)
		printListWrapperFileBase(in_outFile, listPrefix+'double'+suffix,	listPrefix+'object'+suffix)
		printListWrapperFileBase(in_outFile, listPrefix+'long'+suffix,		listPrefix+'object'+suffix)
		printListWrapperFileBase(in_outFile, listPrefix+'string'+suffix,	listPrefix+'object'+suffix)
		printListWrapperFileBase(in_outFile, listPrefix+'DateTime'+suffix,	listPrefix+'object'+suffix)

		listPrefix += toAppendPrefix
		suffix += '>'
		
	#close up the function
	writeStringOut('\r\n\
\
		}\r\n ', in_outFile)
	
	return

#numToProcess	10
def writeAllDictionaries(in_outFile, in_numToProcess = 0):
	
	#comment and function
	stringToWrite = '\
		// ********* AUTOGENERATED ********* \r\n\
\
		private void DummyFunctionDictionaryWrapperFwdDeclareAOT() \r\n\
		{\
	'
	writeStringOut(stringToWrite, in_outFile)
	
	# ListWrapper
	# regular list
	dictPrefix = ''
	toAppendPrefix = 'IDictionary<string,'
	suffix = ''
	
	# loop over these for the depth needed
	for i in range(in_numToProcess):
		#basic types
		printDictionaryWrapperFileBase(in_outFile, dictPrefix+'int'+suffix,			dictPrefix+'object'+suffix)
		printDictionaryWrapperFileBase(in_outFile, dictPrefix+'float'+suffix,		dictPrefix+'object'+suffix)
		printDictionaryWrapperFileBase(in_outFile, dictPrefix+'double'+suffix,		dictPrefix+'object'+suffix)
		printDictionaryWrapperFileBase(in_outFile, dictPrefix+'long'+suffix,		dictPrefix+'object'+suffix)
		printDictionaryWrapperFileBase(in_outFile, dictPrefix+'string'+suffix,		dictPrefix+'object'+suffix)
		printDictionaryWrapperFileBase(in_outFile, dictPrefix+'DateTime'+suffix,	dictPrefix+'object'+suffix)
		
		dictPrefix += toAppendPrefix
		suffix += '>'
	
	#close up the function
	writeStringOut('\
	   } \r\n ', in_outFile)
				   
	return

def writeMixedListDictionaryTypes(in_outFile, in_numToProcess = 0):
	#comment and function
	stringToWrite = '\
		// ********* AUTOGENERATED ********* \r\n\
\
		private void DummyFunctionMixedListDictionaryFwdDeclareAOT() \r\n\
		{\
	'
	writeStringOut(stringToWrite, in_outFile)
	
	# ListWrapper
	# regular list
	dictPrefix = ''
	listPrefix = ''
	toAppendDictPrefix = 'IDictionary<string,'
	toAppendListPrefix = 'IList<'
	suffix = ''
	# loop over these for the depth needed
	for i in range(in_numToProcess):
		#list first level types
		#dictionary first level types
		printListWrapperFileBase(in_outFile, listPrefix+'IDictionary<string, int>'+suffix,		listPrefix+'IDictionary<string, object>'+suffix)
		printDictionaryWrapperFileBase(in_outFile, dictPrefix+'IList<int>'+suffix,			dictPrefix+'IList<object>'+suffix)
		
		printListWrapperFileBase(in_outFile, listPrefix+'IDictionary<string, float>'+suffix,	listPrefix+'IDictionary<string, object>'+suffix)
		printDictionaryWrapperFileBase(in_outFile, dictPrefix+'IList<float>'+suffix,		dictPrefix+'IList<object>'+suffix)
		
		printListWrapperFileBase(in_outFile, listPrefix+'IDictionary<string, double>'+suffix,	listPrefix+'IDictionary<string, object>'+suffix)
		printDictionaryWrapperFileBase(in_outFile, dictPrefix+'IList<double>'+suffix,		dictPrefix+'IList<object>'+suffix)
		
		printListWrapperFileBase(in_outFile, listPrefix+'IDictionary<string, long>'+suffix,		listPrefix+'IDictionary<string, object>'+suffix)
		printDictionaryWrapperFileBase(in_outFile, dictPrefix+'IList<long>'+suffix,			dictPrefix+'IList<object>'+suffix)
		
		printListWrapperFileBase(in_outFile, listPrefix+'IDictionary<string, string>'+suffix,	listPrefix+'IDictionary<string, object>'+suffix)
		printDictionaryWrapperFileBase(in_outFile, dictPrefix+'IList<string>'+suffix,		dictPrefix+'IList<object>'+suffix)

		printListWrapperFileBase(in_outFile, listPrefix+'IDictionary<string, DateTime>'+suffix,	listPrefix+'IDictionary<string, object>'+suffix)
		printDictionaryWrapperFileBase(in_outFile, dictPrefix+'IList<DateTime>'+suffix,		dictPrefix+'IList<object>'+suffix)
		
		# every two ensure to switch
		# so that we can get IList<IDict<IList<IDict<>>>> ---- quick example
		if i % 2 == 0:
			dictPrefix += toAppendDictPrefix
			listPrefix += toAppendListPrefix
		else:
			dictPrefix += toAppendListPrefix
			listPrefix += toAppendDictPrefix
		
		suffix += '>'
	
	#close up the function
	writeStringOut('\
		} \r\n ', in_outFile)

	return

#in_typeOne			int, List<int>				- '+ in_typeOne +'
#in_typeTwo			object, List<object>		- '+ in_typeTwo+'
def printListWrapperFileBase(in_outFile, in_typeOne, in_typeTwo):
	# create the string to write
	incrementGlobalCounter()
	stringToCreate1 = '{}{}'.format('toCreate', globalCounter)
	incrementGlobalCounter()
	stringToCreate2 = '{}{}'.format('toCreate', globalCounter)

	incrementGlobalCounter()
	stringToPrint1 = '{}{}'.format('print', globalCounter)
	incrementGlobalCounter()
	stringToPrint2 = '{}{}'.format('print', globalCounter)
	incrementGlobalCounter()
	stringToPrint3 = '{}{}'.format('print', globalCounter)

	stringToWrite = '\
			IList<'+ in_typeOne +'> '+ stringToCreate1 +' = new List<'+ in_typeOne +'>();\r\n\
			IList<'+ in_typeTwo +'> '+ stringToCreate2 +'  = new List<'+ in_typeTwo +'>();\r\n\
			\r\n\
			ListWrapper<'+ in_typeOne +', '+ in_typeTwo+'> '+ stringToPrint1 +' = new ListWrapper<'+ in_typeOne +', '+ in_typeTwo+'>('+ stringToCreate2 +');\r\n\
			ListWrapper<'+ in_typeTwo+', '+ in_typeOne +'> '+ stringToPrint2 +' = new ListWrapper<'+ in_typeTwo+', '+ in_typeOne +'>('+ stringToCreate1 +');\r\n\
			ListWrapper<'+ in_typeOne +', '+ in_typeOne +'> '+ stringToPrint3 +' = new ListWrapper<'+ in_typeOne +', '+ in_typeOne +'>('+ stringToCreate1 +');\r\n\
			\r\n\
			UnityEngine.Debug.Log("EntityUtil.DummyFunctionFwdDeclareAOT() ---  " + '+ stringToPrint1 +'.Count);\r\n\
			UnityEngine.Debug.Log("EntityUtil.DummyFunctionFwdDeclareAOT() ---  " + '+ stringToPrint2 +'.Count);\r\n\
			UnityEngine.Debug.Log("EntityUtil.DummyFunctionFwdDeclareAOT() ---  " + '+ stringToPrint3 +'.Count);\r\n\
			'
					
	writeStringOut(stringToWrite, in_outFile, 0)
	return

#in_typeOne			int, IDictionary<string, int>		- '+ in_typeOne +'
#in_typeTwo			object, IDictionary<string, object>	- '+ in_typeTwo+'
def printDictionaryWrapperFileBase(in_outFile, in_typeOne, in_typeTwo):
	# create the string to write
	stringToCreate1 = '{}{}'.format('toCreate', globalCounter)
	incrementGlobalCounter()
	stringToCreate2 = '{}{}'.format('toCreate', globalCounter)
	incrementGlobalCounter()
	stringToPrint1 = '{}{}'.format('print', globalCounter)
	incrementGlobalCounter()
	stringToPrint2 = '{}{}'.format('print', globalCounter)
	incrementGlobalCounter()
	stringToPrint3 = '{}{}'.format('print', globalCounter)
		
	stringToWrite = '\
			IDictionary<string, '+ in_typeOne +'> '+ stringToCreate1 +' = new Dictionary<string, '+ in_typeOne +'>();\r\n\
			IDictionary<string, '+ in_typeTwo+'> '+ stringToCreate2 +'  = new Dictionary<string, '+ in_typeTwo+'>();\r\n\
			\r\n\
			DictionaryWrapper<'+ in_typeOne +', '+ in_typeTwo+'> '+ stringToPrint1 +' = new DictionaryWrapper<'+ in_typeOne +', '+ in_typeTwo+'>('+ stringToCreate2 +');\r\n\
			DictionaryWrapper<'+ in_typeTwo+', '+ in_typeOne +'> '+ stringToPrint2 +' = new DictionaryWrapper<'+ in_typeTwo+', '+ in_typeOne +'>('+ stringToCreate1 +');\r\n\
			DictionaryWrapper<'+ in_typeOne +', '+ in_typeOne +'> '+ stringToPrint3 +' = new DictionaryWrapper<'+ in_typeOne +', '+ in_typeOne +'>('+ stringToCreate1 +');\r\n\
			\r\n\
			UnityEngine.Debug.Log("EntityUtil.DummyFunctionDictionaryWrapperFwdDeclareAOT() ---  " + '+ stringToPrint1 +'.Count);\r\n\
			UnityEngine.Debug.Log("EntityUtil.DummyFunctionDictionaryWrapperFwdDeclareAOT() ---  " + '+ stringToPrint2 +'.Count);\r\n\
			UnityEngine.Debug.Log("EntityUtil.DummyFunctionDictionaryWrapperFwdDeclareAOT() ---  " + '+ stringToPrint3 +'.Count);\r\n\
			'

	writeStringOut(stringToWrite, in_outFile, 0)
	return

#run the program
if __name__ == "__main__":
	main(sys.argv[1:])

